{"version":3,"sources":["../src/template.js"],"names":["TEMPLATES_DIR","__dirname","MATCH_URL","Handlebars","registerHelper","object","SafeString","JSON","stringify","context","options","length","list","filter","commit","hash","exclude","pattern","RegExp","test","message","subject","map","item","fn","join","heading","val","r","flags","inverse","getTemplate","template","response","text","path","Error","cleanTemplate","replace","compileTemplate","data","handlebarsSetup","setup","require","process","cwd","compile"],"mappings":"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","sourcesContent":["import { join } from 'path'\nimport Handlebars from 'handlebars'\nimport fetch from 'node-fetch'\nimport { readFile, fileExists } from './utils'\n\nconst TEMPLATES_DIR = join(__dirname, '..', 'templates')\nconst MATCH_URL = /^https?:\\/\\/.+/\n\nHandlebars.registerHelper('json', function (object) {\n  return new Handlebars.SafeString(JSON.stringify(object, null, 2))\n})\n\nHandlebars.registerHelper('commit-list', function (context, options) {\n  if (!context || context.length === 0) {\n    return ''\n  }\n\n  const list = context\n    .filter(commit => {\n      if (options.hash.exclude) {\n        const pattern = new RegExp(options.hash.exclude, 'm')\n        if (pattern.test(commit.message)) {\n          return false\n        }\n      }\n      if (options.hash.message) {\n        const pattern = new RegExp(options.hash.message, 'm')\n        return pattern.test(commit.message)\n      }\n      if (options.hash.subject) {\n        const pattern = new RegExp(options.hash.subject)\n        return pattern.test(commit.subject)\n      }\n      return true\n    })\n    .map(item => options.fn(item))\n    .join('')\n\n  if (!list) {\n    return ''\n  }\n\n  return `${options.hash.heading}\\n\\n${list}`\n})\n\nHandlebars.registerHelper('matches', function (val, pattern, options) {\n  const r = new RegExp(pattern, options.hash.flags || '')\n  return r.test(val) ? options.fn(this) : options.inverse(this)\n})\n\nasync function getTemplate (template) {\n  if (MATCH_URL.test(template)) {\n    const response = await fetch(template)\n    return response.text()\n  }\n  if (await fileExists(template)) {\n    return readFile(template)\n  }\n  const path = join(TEMPLATES_DIR, template + '.hbs')\n  if (await fileExists(path) === false) {\n    throw new Error(`Template '${template}' was not found`)\n  }\n  return readFile(path)\n}\n\nfunction cleanTemplate (template) {\n  return template\n    // Remove indentation\n    .replace(/\\n +/g, '\\n')\n    .replace(/^ +/, '')\n    // Fix multiple blank lines\n    .replace(/\\n\\n\\n+/g, '\\n\\n')\n    .replace(/\\n\\n$/, '\\n')\n}\n\nexport async function compileTemplate ({ template, handlebarsSetup }, data) {\n  if (handlebarsSetup) {\n    const setup = require(join(process.cwd(), handlebarsSetup))\n    if (typeof setup === 'function') {\n      setup(Handlebars)\n    }\n  }\n  const compile = Handlebars.compile(await getTemplate(template))\n  if (template === 'json') {\n    return compile(data)\n  }\n  return cleanTemplate(compile(data))\n}\n"],"file":"template.js"}