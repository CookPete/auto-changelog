{"version":3,"sources":["../src/run.js"],"names":["DEFAULT_OPTIONS","output","template","remote","commitLimit","backfillLimit","tagPrefix","sortCommits","PACKAGE_FILE","PACKAGE_OPTIONS_KEY","OPTIONS_DOTFILE","getOptions","argv","options","Command","option","parseLimit","str","split","version","parse","pkg","packageOptions","dotOptions","getLatestVersion","commits","latestVersion","semver","valid","Error","file","prefix","some","c","test","tag","getReleases","releases","includeBranch","branch","sort","sortReleases","run","log","string","stdout","commitProgress","bytes","changelog","process","write","Buffer","byteLength"],"mappings":"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","sourcesContent":["import { Command } from 'commander'\nimport semver from 'semver'\nimport uniqBy from 'lodash.uniqby'\nimport { version } from '../package.json'\nimport { fetchRemote } from './remote'\nimport { fetchCommits } from './commits'\nimport { parseReleases, sortReleases } from './releases'\nimport { compileTemplate } from './template'\nimport { parseLimit, readJson, writeFile, fileExists, updateLog, formatBytes } from './utils'\n\nconst DEFAULT_OPTIONS = {\n  output: 'CHANGELOG.md',\n  template: 'compact',\n  remote: 'origin',\n  commitLimit: 3,\n  backfillLimit: 3,\n  tagPrefix: '',\n  sortCommits: 'relevance'\n}\n\nconst PACKAGE_FILE = 'package.json'\nconst PACKAGE_OPTIONS_KEY = 'auto-changelog'\nconst OPTIONS_DOTFILE = '.auto-changelog'\n\nasync function getOptions (argv) {\n  const options = new Command()\n    .option('-o, --output [file]', `output file, default: ${DEFAULT_OPTIONS.output}`)\n    .option('-t, --template [template]', `specify template to use [compact, keepachangelog, json], default: ${DEFAULT_OPTIONS.template}`)\n    .option('-r, --remote [remote]', `specify git remote to use for links, default: ${DEFAULT_OPTIONS.remote}`)\n    .option('-p, --package [file]', 'use version from file as latest release, default: package.json')\n    .option('-v, --latest-version [version]', 'use specified version as latest release')\n    .option('-u, --unreleased', 'include section for unreleased changes')\n    .option('-l, --commit-limit [count]', `number of commits to display per release, default: ${DEFAULT_OPTIONS.commitLimit}`, parseLimit)\n    .option('-b, --backfill-limit [count]', `number of commits to backfill empty releases with, default: ${DEFAULT_OPTIONS.backfillLimit}`, parseLimit)\n    .option('-i, --issue-url [url]', 'override url for issues, use {id} for issue id')\n    .option('--issue-pattern [regex]', 'override regex pattern for issues in commit messages')\n    .option('--breaking-pattern [regex]', 'regex pattern for breaking change commits')\n    .option('--merge-pattern [regex]', 'add custom regex pattern for merge commits')\n    .option('--ignore-commit-pattern [regex]', 'pattern to ignore when parsing commits')\n    .option('--tag-pattern [regex]', 'override regex pattern for release tags')\n    .option('--tag-prefix [prefix]', 'prefix used in version tags')\n    .option('--starting-commit [hash]', 'starting commit to use for changelog generation')\n    .option('--sort-commits [property]', `sort commits by property, default: ${DEFAULT_OPTIONS.sortCommits}`)\n    .option('--include-branch [branch]', 'one or more branches to include commits from, comma separated', str => str.split(','))\n    .option('--release-summary', 'use tagged commit message body as release summary')\n    .option('--handlebars-setup <file>', 'handlebars setup file')\n    .option('--stdout', 'output changelog to stdout')\n    .version(version)\n    .parse(argv)\n\n  const pkg = await readJson(PACKAGE_FILE)\n  const packageOptions = pkg ? pkg[PACKAGE_OPTIONS_KEY] : null\n  const dotOptions = await readJson(OPTIONS_DOTFILE)\n\n  return {\n    ...DEFAULT_OPTIONS,\n    ...dotOptions,\n    ...packageOptions,\n    ...options\n  }\n}\n\nasync function getLatestVersion (options, commits) {\n  if (options.latestVersion) {\n    if (!semver.valid(options.latestVersion)) {\n      throw new Error('--latest-version must be a valid semver version')\n    }\n    return options.latestVersion\n  }\n  if (options.package) {\n    const file = options.package === true ? PACKAGE_FILE : options.package\n    if (await fileExists(file) === false) {\n      throw new Error(`File ${file} does not exist`)\n    }\n    const { version } = await readJson(file)\n    const prefix = commits.some(c => /^v/.test(c.tag)) ? 'v' : ''\n    return `${prefix}${version}`\n  }\n  return null\n}\n\nasync function getReleases (commits, remote, latestVersion, options) {\n  let releases = parseReleases(commits, remote, latestVersion, options)\n  if (options.includeBranch) {\n    for (const branch of options.includeBranch) {\n      const commits = await fetchCommits(remote, options, branch)\n      releases = [\n        ...releases,\n        ...parseReleases(commits, remote, latestVersion, options)\n      ]\n    }\n  }\n  return uniqBy(releases, 'tag').sort(sortReleases)\n}\n\nexport default async function run (argv) {\n  const options = await getOptions(argv)\n  const log = string => options.stdout ? null : updateLog(string)\n  log('Fetching remote…')\n  const remote = await fetchRemote(options.remote)\n  const commitProgress = bytes => log(`Fetching commits… ${formatBytes(bytes)} loaded`)\n  const commits = await fetchCommits(remote, options, null, commitProgress)\n  log('Generating changelog…')\n  const latestVersion = await getLatestVersion(options, commits)\n  const releases = await getReleases(commits, remote, latestVersion, options)\n  const changelog = await compileTemplate(options, { releases })\n  if (options.stdout) {\n    process.stdout.write(changelog)\n  } else {\n    await writeFile(options.output, changelog)\n  }\n  const bytes = Buffer.byteLength(changelog, 'utf8')\n  log(`${formatBytes(bytes)} written to ${options.output}\\n`)\n}\n"],"file":"run.js"}