{"version":3,"sources":["../src/utils.js"],"names":["MONTH_NAMES","updateLog","string","clearLine","readline","process","stdout","cursorTo","write","formatBytes","bytes","Math","max","round","cmd","onProgress","split","args","Promise","resolve","reject","child","data","on","buffer","toString","length","getGitVersion","output","match","niceDate","date","Date","day","getUTCDate","month","getUTCMonth","year","getUTCFullYear","isLink","test","parseLimit","limit","parseInt","replaceText","options","Object","keys","reduce","pattern","replace","RegExp","createCallback","err","readFile","path","fs","writeFile","fileExists","access","readJson","JSON","parse"],"mappings":"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","sourcesContent":["import readline from 'readline'\nimport fs from 'fs'\nimport { spawn } from 'child_process'\n\nconst MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function updateLog (string, clearLine = true) {\n  if (clearLine) {\n    readline.clearLine(process.stdout)\n    readline.cursorTo(process.stdout, 0)\n  }\n  process.stdout.write(`auto-changelog: ${string}`)\n}\n\nexport function formatBytes (bytes) {\n  return `${Math.max(1, Math.round(bytes / 1024))} kB`\n}\n\n// Simple util for calling a child process\nexport function cmd (string, onProgress) {\n  const [ cmd, ...args ] = string.split(' ')\n  return new Promise((resolve, reject) => {\n    const child = spawn(cmd, args)\n    let data = ''\n\n    child.stdout.on('data', buffer => {\n      data += buffer.toString()\n      if (onProgress) {\n        onProgress(data.length)\n      }\n    })\n    child.stdout.on('end', () => resolve(data))\n    child.on('error', reject)\n  })\n}\n\nexport async function getGitVersion () {\n  const output = await cmd('git --version')\n  const match = output.match(/\\d+\\.\\d+\\.\\d+/)\n  return match ? match[0] : null\n}\n\nexport function niceDate (string) {\n  const date = new Date(string)\n  const day = date.getUTCDate()\n  const month = MONTH_NAMES[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  return `${day} ${month} ${year}`\n}\n\nexport function isLink (string) {\n  return /^http/.test(string)\n}\n\nexport function parseLimit (limit) {\n  return limit === 'false' ? false : parseInt(limit, 10)\n}\n\nexport function replaceText (string, options) {\n  if (!options.replaceText) {\n    return string\n  }\n  return Object.keys(options.replaceText).reduce((string, pattern) => {\n    return string.replace(new RegExp(pattern, 'g'), options.replaceText[pattern])\n  }, string)\n}\n\nconst createCallback = (resolve, reject) => (err, data) => {\n  if (err) reject(err)\n  else resolve(data)\n}\n\nexport function readFile (path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf-8', createCallback(resolve, reject))\n  })\n}\n\nexport function writeFile (path, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, createCallback(resolve, reject))\n  })\n}\n\nexport function fileExists (path) {\n  return new Promise(resolve => {\n    fs.access(path, err => resolve(!err))\n  })\n}\n\nexport async function readJson (path) {\n  if (await fileExists(path) === false) {\n    return null\n  }\n  return JSON.parse(await readFile(path))\n}\n"],"file":"utils.js"}