{"version":3,"sources":["../src/releases.js"],"names":["MERGE_COMMIT_PATTERN","COMMIT_MESSAGE_PATTERN","NUMERIC_PATTERN","parseReleases","commits","remote","latestVersion","options","release","newRelease","releases","sortCommits","commitSorter","commit","tag","unreleased","push","href","getCompareLink","tagPrefix","sliceCommits","sort","major","tagPattern","semver","diff","summary","getSummary","message","releaseSummary","date","merge","merges","fixes","filterCommit","sortReleases","a","b","tags","inferSemver","valid","rcompare","test","parseFloat","Date","toISOString","title","niceDate","isoDate","slice","commitLimit","backfillLimit","emptyRelease","length","limit","minLimit","filter","c","breaking","Math","max","ignoreCommitPattern","RegExp","subject","findIndex","m","from","to","hostname","url","match","insertions","deletions"],"mappings":"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","sourcesContent":["import semver from 'semver'\nimport { niceDate } from './utils'\n\nconst MERGE_COMMIT_PATTERN = /^Merge (remote-tracking )?branch '.+'/\nconst COMMIT_MESSAGE_PATTERN = /\\n+([\\S\\s]+)/\nconst NUMERIC_PATTERN = /^\\d+(\\.\\d+)?$/\n\nexport function parseReleases (commits, remote, latestVersion, options) {\n  let release = newRelease(latestVersion)\n  const releases = []\n  const sortCommits = commitSorter(options)\n  for (let commit of commits) {\n    if (commit.tag) {\n      if (release.tag || options.unreleased) {\n        releases.push({\n          ...release,\n          href: getCompareLink(\n            `${options.tagPrefix}${commit.tag}`,\n            release.tag ? `${options.tagPrefix}${release.tag}` : 'HEAD',\n            remote\n          ),\n          commits: sliceCommits(release.commits.sort(sortCommits), options, release),\n          major: !options.tagPattern && commit.tag && release.tag && semver.diff(commit.tag, release.tag) === 'major'\n        })\n      }\n      const summary = getSummary(commit.message, options.releaseSummary)\n      release = newRelease(commit.tag, commit.date, summary)\n    }\n    if (commit.merge) {\n      release.merges.push(commit.merge)\n    } else if (commit.fixes) {\n      release.fixes.push({\n        fixes: commit.fixes,\n        commit\n      })\n    } else if (filterCommit(commit, options, release)) {\n      release.commits.push(commit)\n    }\n  }\n  releases.push({\n    ...release,\n    commits: sliceCommits(release.commits.sort(sortCommits), options, release)\n  })\n  return releases\n}\n\nexport function sortReleases (a, b) {\n  const tags = {\n    a: inferSemver(a.tag),\n    b: inferSemver(b.tag)\n  }\n  if (tags.a && tags.b) {\n    if (semver.valid(tags.a) && semver.valid(tags.b)) {\n      return semver.rcompare(tags.a, tags.b)\n    }\n    if (NUMERIC_PATTERN.test(tags.a) && NUMERIC_PATTERN.test(tags.b)) {\n      return parseFloat(tags.a) < parseFloat(tags.b) ? 1 : -1\n    }\n    if (tags.a === tags.b) {\n      return 0\n    }\n    return tags.a < tags.b ? 1 : -1\n  }\n  if (tags.a) return 1\n  if (tags.b) return -1\n  return 0\n}\n\nfunction inferSemver (tag) {\n  if (/^v\\d+$/.test(tag)) {\n    // v1 becomes v1.0.0\n    return `${tag}.0.0`\n  }\n  if (/^v\\d+\\.\\d+$/.test(tag)) {\n    // v1.0 becomes v1.0.0\n    return `${tag}.0`\n  }\n  return tag\n}\n\nfunction newRelease (tag = null, date = new Date().toISOString(), summary = null) {\n  return {\n    commits: [],\n    fixes: [],\n    merges: [],\n    tag,\n    date,\n    summary,\n    title: tag || 'Unreleased',\n    niceDate: niceDate(date),\n    isoDate: date.slice(0, 10)\n  }\n}\n\nfunction sliceCommits (commits, { commitLimit, backfillLimit }, release) {\n  if (commitLimit === false) {\n    return commits\n  }\n  const emptyRelease = release.fixes.length === 0 && release.merges.length === 0\n  const limit = emptyRelease ? backfillLimit : commitLimit\n  const minLimit = commits.filter(c => c.breaking).length\n  return commits.slice(0, Math.max(minLimit, limit))\n}\n\nfunction filterCommit (commit, { ignoreCommitPattern }, release) {\n  if (commit.breaking) {\n    return true\n  }\n  if (ignoreCommitPattern) {\n    // Filter out commits that match ignoreCommitPattern\n    return new RegExp(ignoreCommitPattern).test(commit.subject) === false\n  }\n  if (semver.valid(commit.subject)) {\n    // Filter out version commits\n    return false\n  }\n  if (MERGE_COMMIT_PATTERN.test(commit.subject)) {\n    // Filter out merge commits\n    return false\n  }\n  if (release.merges.findIndex(m => m.message === commit.subject) !== -1) {\n    // Filter out commits with the same message as an existing merge\n    return false\n  }\n  return true\n}\n\nfunction getCompareLink (from, to, remote) {\n  if (!remote) {\n    return null\n  }\n  if (/bitbucket/.test(remote.hostname)) {\n    return `${remote.url}/compare/${to}..${from}`\n  }\n  if (/dev\\.azure/.test(remote.hostname) || /visualstudio/.test(remote.hostname)) {\n    return `${remote.url}/branches?baseVersion=GT${to}&targetVersion=GT${from}&_a=commits`\n  }\n  return `${remote.url}/compare/${from}...${to}`\n}\n\nfunction getSummary (message, releaseSummary) {\n  if (!message || !releaseSummary) {\n    return null\n  }\n  if (COMMIT_MESSAGE_PATTERN.test(message)) {\n    return message.match(COMMIT_MESSAGE_PATTERN)[1]\n  }\n  return null\n}\n\nfunction commitSorter ({ sortCommits }) {\n  return (a, b) => {\n    if (!a.breaking && b.breaking) return 1\n    if (a.breaking && !b.breaking) return -1\n    if (sortCommits === 'date' || sortCommits === 'date ASC') return new Date(a.date) - new Date(b.date)\n    if (sortCommits === 'date DESC') return new Date(b.date) - new Date(a.date)\n    return (b.insertions + b.deletions) - (a.insertions + a.deletions)\n  }\n}\n"],"file":"releases.js"}